name: Create VPS (Auto-Restart & Safe)

# Allow this workflow to push changes
permissions:
  contents: write

on:
  workflow_dispatch:
  repository_dispatch:
    types: [create-vps]

jobs:
  start-vps:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    env:
      TMATE_SERVER: nyc1.tmate.io

    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: 📁 Prepare dirs
        run: mkdir -p links .backup

      - name: 🔧 Set defaults
        id: set_name
        run: |
          name="${{ github.event.client_payload.vps_name }}"
          name="${name:-manual-vps}"
          echo "vps_name=$name" >> $GITHUB_OUTPUT

      - name: 💾 Restore backup (optional)
        run: |
          name="${{ steps.set_name.outputs.vps_name }}"
          if [ "${{ github.event.client_payload.backup }}" = "true" ]; then
            echo "Restoring backup for $name..."
            unzip ".backup/$name.zip" -d . || echo "⚠️ No backup found."
          fi

      - name: 🔐 Start tmate session
        run: |
          name="${{ steps.set_name.outputs.vps_name }}"
          sudo apt update -y && sudo apt install -y tmate
          tmate -S /tmp/tmate.sock new-session -d
          tmate -S /tmp/tmate.sock wait tmate-ready
          SSH=$(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')
          echo "$SSH" | tee "links/$name.txt"

      - name: 🚀 Start Playit Tunnel
        run: |
          wget -q https://github.com/playit-cloud/playit-agent/releases/latest/download/playit-linux-amd64 -O playit
          chmod +x playit
          nohup ./playit > playit.log 2>&1 &
          echo "✅ Playit started."

      - name: 📦 Save backup (user data only)
        run: |
          name="${{ steps.set_name.outputs.vps_name }}"
          zip -r ".backup/$name.zip" . \
            -x "/usr/*" "/bin/*" "/lib/*" "/lib64/*" "/sbin/*" "/etc/*" "/var/*" \
            ".git/*" ".github/*" ".backup/*" || true

      - name: 🔧 Configure git remote for push (use GITHUB_TOKEN)
        run: |
          # ensure commits use a sane author, and point origin to authenticated URL
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

      - name: 📤 Commit & push updated files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # stage files (ignore failure if pattern not present)
          git add links/*.txt .backup/*.zip || true

          # If there are changes, commit and push to the current branch
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "🔁 Updated SSH + backup for ${{ steps.set_name.outputs.vps_name }}"
            BRANCH=$(git rev-parse --abbrev-ref HEAD || echo "main")
            git push origin "HEAD:$BRANCH"
          fi

      - name: ⏳ Keep VPS alive (POSIX-safe loop)
        run: |
          i=1
          while [ $i -le 360 ]; do
            echo "🟢 Running minute $i/360..."
            command sleep 60 || break
            i=$((i+1))
          done

      - name: 🔁 Restart workflow automatically
        if: always()
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer YOUR_GITHUB_TOKEN_HERE" \
            -H "Content-Type: application/json" \
            https://api.github.com/repos/${{ github.repository }}/dispatches \
            -d '{"event_type": "create-vps", "client_payload": {"vps_name": "manual-vps", "backup": true}}'
